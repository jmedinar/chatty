# yaml-language-server: $schema=https://schemastore.org/yamllint.json
# Example format and required fields
  # - name: 
  #   description: 
  #   action: 
  #   verification: 
  #   exit_code: 
---
title: Chapter 9
section: Log Management and Troubleshooting
tasks:

  - name: Using grep to analyze logs
    description: |
      The `grep` command is an essential tool for system administrators when
      analyzing log files. It allows you to quickly search for specific
      errors, events, or keywords within a file.
    action: |
      Use `grep` to find specific events in the system log.

      1. View the last 10 entries of your system's log:
            sudo tail /var/log/messages

      2. Use `grep` to search for `systemd` entries in the same log file:
            sudo grep systemd /var/log/messages

      3. You can also use `grep -c` to count the number of matching lines
            sudo grep -c systemd /var/log/messages

      4. Search only for today's entries of the systemd messages:
            sudo grep "$(date +%b\ %d)" /var/log/messages | grep systemd

      5. Search only entries from 6 hours ago:
            ago_date=$(date +%b\ %d\ %H -d '6 hours ago')
            sudo grep "$ago_date" /var/log/messages | grep systemd
    verification: SKIP_CHECK
    exit_code: 0

  - name: Using tail and head to view logs
    description: |
      The `tail` and `head` commands are useful for viewing the beginning or
      end of log files, which is often necessary for troubleshooting.
    action: |
      1. View the last 10 lines of the system log:
            sudo tail /var/log/messages

      2. View the first 10 lines of the same log:
            sudo head /var/log/messages

      3. To view the last 20 lines, use:
            sudo tail -n 20 /var/log/messages

      4. To view the first 20 lines, use:
            sudo head -n 20 /var/log/messages
    verification: SKIP_CHECK
    exit_code: 0

  - name: Using syslog for centralized logging
    description: |
      Syslog allows for centralized logging of system messages.
      It handles messages based on their facility and severity levels.

      Facilities:
        - `auth`: Authentication messages     - `cron`: Cron daemon messages
        - `daemon`: System daemons            - `kern`: Kernel messages
        - `mail`: Mail system messages        - `syslog`: Messages generated by syslogd
        - `user`: User-level messages         - `local0` to `local7`: Local use messages

      Severities:
        - `0` (emerg): Emergency messages     - `1` (alert): Alert messages
        - `2` (crit): Critical conditions     - `3` (err): Error messages
        - `4` (warning): Warning messages     - `5` (notice): Significant conditions
        - `6` (info): Informational messages  - `7` (debug): Debugging messages
    action: |
      1. Manually log a message using the `logger` command:

            logger -p local0.crit "You haven't seen anything yet!"

      2. View today's critical messages using journalctl:

            journalctl -p crit --since today            
    verification: journalctl -p crit --since today | grep -q "You haven't seen anything yet!" 2>/dev/null
    exit_code: 0

  - name: Using journalctl to view logs, basic
    description: |
      `journalctl` is a command-line utility to query and display messages from
      the journal, which is a component of systemd that collects and manages
      logs.
    action: |
      1. View the entire journal:
            journalctl

      2. View the last 10 entries:
            journalctl -n 10

      3. View logs since the last boot:
            journalctl -b

      4. View logs for the current boot:
            journalctl -b 0
      
      5. View logs for the kernel messages:
            journalctl -k

      6. View logs for a specific service, e.g., sshd:
            journalctl -u sshd

      7. View logs for a specific user, e.g., UID 1000:
            journalctl _UID=1000
    verification: SKIP_CHECK
    exit_code: 0

  - name: Using journalctl to view logs, filter by time
    description: |
      `journalctl` allows filtering logs by time, which is useful for
      troubleshooting specific events.
    action: |
      1. View logs from the last hour:
            journalctl --since "1 hour ago"

      2. View logs from a specific date and time:
            journalctl --since "2023-10-01 12:00:00" --until "2023-10-01 14:00:00"

      3. View logs for today:
            journalctl --since today

      4. View logs for yesterday:
            journalctl --since yesterday
    verification: SKIP_CHECK
    exit_code: 0

  - name: Using journalctl to view logs, filter by priority
    description: |
      You can filter logs by priority levels using `journalctl`.
    action: |
      1. View only error messages:
            journalctl -p err

      2. View messages with a priority of warning or higher:
            journalctl -p warn

      3. View messages with a priority of info or lower:
            journalctl -p info
    verification: SKIP_CHECK
    exit_code: 0

  - name: Modifying journalctl output
    description: |
      `journalctl` provides options to modify the output format and content.
    action: |
      1. View logs in a JSON format:
            journalctl -o json

      2. View logs with a specific field, e.g., `_PID`:
            journalctl -o json-pretty -f _PID=1234

      3. View logs with a specific field and value, e.g., `_UID=1000`:
            journalctl -o json-pretty _UID=1000
    verification: SKIP_CHECK
    exit_code: 0

  - name: JournalD cleaning old logs
    description: |
      JournalD automatically manages log files, but you can manually clean up
      old logs to free up space.
    action: |
      1. Verify the current size of the journal:
            sudo journalctl --disk-usage

      2. Clean up old logs:
            sudo journalctl --vacuum-time=2weeks

      3. Alternatively, you can specify a maximum size for the journal:
            sudo journalctl --vacuum-size=100M

      4. To remove all archived logs, use:
            sudo journalctl --rotate
            sudo journalctl --vacuum-time=1s

      5. Verify the disk usage again:
            sudo journalctl --disk-usage
    verification: SKIP_CHECK
    exit_code: 0

  - name: Limiting journal expansion
    description: |
      Journal expansion can be limited to prevent excessive growth
      by configuring the `journald.conf` file.
    action: |
      1. Open the configuration file:
            sudo nano /etc/systemd/journald.conf

      2. Set the following options:
        - `SystemMaxUse`: Limit the total disk space used by journal files.
        - `SystemKeepFree`: Ensure a certain amount of disk space is always free.
        - `SystemMaxFileSize`: Limit the size of individual journal files.
        - `SystemMaxFiles`: Limit the number of individual journal files.

      3. Save and exit, then restart the journald service:
            sudo systemctl restart systemd-journald
    verification: SKIP_CHECK
    exit_code: 0
...